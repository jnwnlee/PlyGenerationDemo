{"version":3,"sources":["components/Checkbox.js","components/columns.js","components/Filter.js","components/SelectedTrackTable.js","components/TrackTable.js","App.js","index.js"],"names":["Checkbox","React","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","type","COLUMNS","Header","accessor","disableFilters","Cell","value","map","elem","idx","length","show","GlobalFilter","filter","setFilter","useState","setValue","onChange","useAsyncDebounce","undefined","id","placeholder","e","target","ColumnFilter","column","filterValue","SelectedTrackTable","props","columns","useMemo","data","useTable","initialState","hiddenColumns","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","style","width","position","float","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","TrackTable","setLoading","setTrackData","a","require","data_obj","console","log","alert","loading","trackData","requireData","defaultColumn","Filter","useFilters","useGlobalFilter","useSortBy","usePagination","useRowSelect","hooks","visibleColumns","push","getToggleAllRowsSelectedProps","getToggleRowSelectedProps","page","nextPage","previousPage","canNextPage","canPreviousPage","pageOptions","gotoPage","setPageSize","pageCount","allColumns","state","setGlobalFilter","selectedFlatRows","globalFilter","pageIndex","pageSize","selectedRows","setSelectedRows","flattenRows","original","r","includes","val","color","height","getToggleHiddenProps","getSortByToggleProps","isSorted","isSortedDesc","canFilter","onClick","disabled","pageNumber","Number","Array","MAXLENGTH","keys","i","selectedTrackID","toString","fontSize","App","className","rootElement","document","getElementById","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.ac5b85a2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Checkbox = React.forwardRef(({ indeterminate, ...rest }, ref) => {\r\n    const defaultRef = React.useRef();\r\n    const resolvedRef = ref || defaultRef;\r\n\r\n    React.useEffect(() => {\r\n        resolvedRef.current.indeterminate = indeterminate;\r\n    }, [resolvedRef, indeterminate]);\r\n\r\n    return (\r\n        <>\r\n            <input type='checkbox' ref={resolvedRef} {...rest}/>\r\n        </>\r\n    )\r\n})","\r\nexport const COLUMNS = [\r\n    {\r\n        Header: 'ID',\r\n        accessor: 'id',\r\n        disableFilters: true\r\n    },\r\n    {\r\n        Header: 'Title',\r\n        accessor: 'Title'\r\n    },\r\n    {\r\n        Header: 'Artists',\r\n        accessor: 'Artists',\r\n        Cell: ({ value }) => value.map((elem, idx) => {return idx !== value.length-1 ? elem+', ' : elem} )\r\n    },\r\n    {\r\n        Header: 'AlbumName',\r\n        accessor: 'AlbumName',\r\n        show: false\r\n    },\r\n    {\r\n        Header: 'Genre',\r\n        accessor: 'Genre',\r\n        Cell: ({ value }) => value.map((elem, idx) => {return idx !== value.length-1 ? elem+', ' : elem} ),\r\n    },\r\n    {\r\n        Header: 'IssueDate',\r\n        accessor: 'IssueDate',\r\n        disableFilters: true,\r\n        show: false\r\n    }\r\n]","import React, { useState } from \"react\";\r\nimport { useAsyncDebounce } from \"react-table\";\r\n\r\nexport const GlobalFilter = ({ filter, setFilter }) => {\r\n    /**\r\n     * get query to filter the tracks in global scope.\r\n     * @param {string} filter query value to filter.\r\n     * @param {function} setFilter setState function for query value.\r\n     */\r\n    const [value, setValue] = useState(filter);\r\n\r\n    const onChange = useAsyncDebounce(value => {\r\n        setFilter(value || undefined)\r\n    }, 1000);\r\n    \r\n    return (\r\n        <span id='searchInput'>\r\n            <input placeholder='Search'\r\n            value={value || ''}\r\n            onChange={e => {\r\n                setValue(e.target.value)\r\n                onChange(e.target.value)\r\n            }}/>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport const ColumnFilter = ({ column }) => {\r\n    /**\r\n     * get query to filter the tracks in column scope.\r\n     * @param {object} column object of react-table column for filtering.\r\n     */\r\n    const { filterValue, setFilter } = column;\r\n\r\n    const [value, setValue] = useState(filterValue);\r\n\r\n    const onChange = useAsyncDebounce(value => {\r\n        setFilter(value || undefined)\r\n    }, 1000);\r\n\r\n    return (\r\n        <span id='columnSearchInput'>\r\n            <input placeholder='Search'\r\n            value={value || ''}\r\n            onChange={e => {\r\n                setValue(e.target.value)\r\n                onChange(e.target.value)\r\n            }}/>\r\n        </span>\r\n    )\r\n}","import React, { useMemo } from \"react\";\r\nimport { useTable } from \"react-table\";    \r\nimport { COLUMNS } from './columns';\r\n\r\nexport const SelectedTrackTable = (props) => {\r\n    /**\r\n     * table of selected tracks.\r\n     * @param {Array} props.data array of selected track objects.\r\n     */\r\n\r\n    const columns = useMemo(() => COLUMNS, []);\r\n    const data = props.data;\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n        initialState: {\r\n            hiddenColumns: columns.map(column => {\r\n                if (column.show === false) return column.accessor || column.id;\r\n            })\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div id='selectecd' style={{width: '49%', position:'relative', float:\"right\"}}>\r\n            <h3>Selected Tracks</h3>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}> \r\n                            {headerGroup.headers.map(column => (\r\n                                <th {...column.getHeaderProps()}>\r\n                                    {column.render('Header')}\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {\r\n                        rows.map(row => {\r\n                            prepareRow(row)\r\n                            return (\r\n                                <tr {...row.getRowProps()}> \r\n                                    {row.cells.map(cell => {\r\n                                        return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                    })}\r\n                                </tr>\r\n                            ) \r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useMemo, useEffect } from \"react\";\r\nimport { useTable, useSortBy, useGlobalFilter, \r\n    useFilters, usePagination, useRowSelect } from \"react-table\";\r\n//import TRACK_DATA from '../data/filtered_song_meta.json';\r\nimport Loader from 'react-loader-spinner';\r\nimport { Checkbox } from \"./Checkbox\";\r\nimport { COLUMNS } from './columns';\r\nimport { GlobalFilter, ColumnFilter } from \"./Filter\";\r\nimport { SelectedTrackTable } from  \"./SelectedTrackTable\";\r\nimport './table.css';\r\n\r\n\r\n\r\nexport const TrackTable = () => {\r\n    /**\r\n     * table of tracks.\r\n     * able to filter, sort, select among tracks.\r\n     * table is paginated\r\n     */\r\n    \r\n     async function requireData(setLoading, setTrackData) {  \r\n        setLoading(true);\r\n        try{\r\n            let data_obj;\r\n            data_obj = await require('../data/filtered_song_meta.json');\r\n            console.log(\"data: \", data_obj);\r\n            setTrackData([...data_obj]);\r\n            setLoading(false);\r\n            return data_obj;\r\n        }\r\n        catch (err) {\r\n            alert('<ERROR> while fetching track list.\\n'+err);\r\n        }\r\n    }\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [trackData, setTrackData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        requireData(setLoading, setTrackData);\r\n        console.log(\"trackData: \", trackData);\r\n    }, []);\r\n    \r\n\r\n    const columns = useMemo(() => COLUMNS, []);\r\n    //const data = useMemo(() => trackData, []);\r\n    const data = trackData;\r\n    const defaultColumn = useMemo(() => ({Filter: ColumnFilter}), []);\r\n    const MAXLENGTH = 40;\r\n\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        page,\r\n        nextPage,\r\n        previousPage,\r\n        canNextPage,\r\n        canPreviousPage,\r\n        pageOptions,\r\n        gotoPage,\r\n        pageCount,\r\n        setPageSize,\r\n        prepareRow,\r\n        allColumns,\r\n        state,\r\n        setGlobalFilter,\r\n        selectedFlatRows\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n        defaultColumn,\r\n        initialState: {\r\n            hiddenColumns: columns.map(column => {\r\n                if (column.show === false) return column.accessor || column.id;\r\n            })\r\n        }\r\n    }, \r\n    useFilters, useGlobalFilter, useSortBy, usePagination, useRowSelect,\r\n    (hooks) => {\r\n        hooks.visibleColumns.push((columns) => {\r\n            return [\r\n                ...columns,\r\n                {\r\n                    id: 'selection',\r\n                    Header: ({getToggleAllRowsSelectedProps}) => (\r\n                        //<Checkbox {...getToggleAllRowsSelectedProps()} />\r\n                        (<>Select</>)\r\n                    ),\r\n                    Cell: ({ row }) => (\r\n                        <Checkbox {...row.getToggleRowSelectedProps()} />\r\n                    )\r\n                }\r\n            ] \r\n            \r\n        })\r\n    }\r\n    );\r\n\r\n    const { globalFilter, pageIndex, pageSize } = state;\r\n    const [ selectedRows, setSelectedRows ] = useState([]);\r\n    useEffect(() => {\r\n        const flattenRows = selectedFlatRows.length === 0 \r\n                            ? []\r\n                            : selectedFlatRows.map((row) => row.original);\r\n\r\n        if (flattenRows.length >= selectedRows.length){\r\n            for (const r of flattenRows){\r\n                if (!selectedRows.includes(r)) {\r\n                    setSelectedRows([...selectedRows, r]);\r\n                    console.log('pushed', r);\r\n                }\r\n        }}\r\n        if (selectedRows.length >= flattenRows.length){\r\n            setSelectedRows([...selectedRows.filter(val => flattenRows.filter(row => row.id===val.id).length>0)]);\r\n        }\r\n    }, [selectedFlatRows]);\r\n\r\n    const onGenerate = () => {\r\n        const selectedTrackID = selectedRows.map(row => row.id)\r\n        console.log('IDs: ', selectedTrackID);\r\n        if (selectedTrackID.length === 0){\r\n            alert('No track selected!');\r\n        } \r\n        else{\r\n            alert(\"IDs of Selected Tracks: \"+selectedTrackID.toString());\r\n        }\r\n    }\r\n\r\n    if (loading){\r\n        console.log('return load');\r\n        return (\r\n                    <div>\r\n                        <span>Loading Tracks ...</span>\r\n                        <Loader type=\"ThreeDots\" color=\"#2BAD60\" height=\"100\" width=\"100\" />\r\n                    </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div id='search'>\r\n            <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\r\n            <div style={{float: 'right'}}>\r\n                <span>{'Show columns: '}</span> \r\n                {\r\n                    allColumns.map(column => {\r\n                        if (column.show === false){\r\n                            return (\r\n                                <label key={column.id}>\r\n                                    <input type='checkbox' {...column.getToggleHiddenProps()}/>\r\n                                    {column.Header}\r\n                                </label>\r\n                            )\r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}> \r\n                            {headerGroup.headers.map((column, idx) => (\r\n                                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                                    {column.render('Header')}\r\n                                    <span>\r\n                                        {column.isSorted ? (column.isSortedDesc ? ' ▼' : ' ▲') : \r\n                                            (column.id === 'selection' ? '' : ' ⇵')}   \r\n                                    </span>\r\n                                    <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {\r\n                        page.map(row => {\r\n                            prepareRow(row)\r\n                            return (\r\n                                <tr {...row.getRowProps()}> \r\n                                    {row.cells.map(cell => {\r\n                                        return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                    })}\r\n                                </tr>\r\n                            ) \r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <div>\r\n                <button onClick={() => previousPage()} disabled={!canPreviousPage}>Previous</button>\r\n                <span>\r\n                    {' '}Page{' '}\r\n                    <input type='number' \r\n                        value={pageIndex + 1}\r\n                        onChange={e =>{\r\n                            const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0;\r\n                            gotoPage(pageNumber);\r\n                    }} />\r\n                    <strong>\r\n                        of {pageOptions.length}\r\n                    </strong>{' '}\r\n                </span>\r\n                <button onClick={() => nextPage()} disabled={!canNextPage}>Next</button>\r\n                <br/>\r\n                <select value={pageSize} onChange={e => setPageSize(Number(e.target.value))}>\r\n                    {\r\n                        [...Array(MAXLENGTH/10).keys()].map(i => (i+1) * 10).map(pageSize => (\r\n                            <option key={pageSize} value={pageSize} >\r\n                                Show {pageSize} Tracks\r\n                            </option>\r\n                        ))\r\n                    }\r\n                </select>\r\n            </div>\r\n        </div>\r\n\r\n        <button id=\"generate\" onClick={onGenerate} style={{fontSize:'30pt'}}>Generate Title</button>\r\n        <SelectedTrackTable data={selectedRows}/>\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { TrackTable } from \"./components/TrackTable\";\r\n\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Playlist Title Generation</h1>\r\n      </header>\r\n      \r\n      <TrackTable/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n\r\n"],"sourceRoot":""}